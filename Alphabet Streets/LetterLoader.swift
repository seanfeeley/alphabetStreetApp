//
//  LetterLoader.swift
//  Alphabet Streets
//
//  Created by Sean Feeley on 09/12/2016.
//  Copyright Â© 2016 sean-feeley. All rights reserved.
//

import Foundation
import UIKit

import MapKit


class LetterLoader {
    
    let activeLetterLoader: ActiveLetterLoader
    let randomLetterLoader: RandomLetterLoader
    let map: MKMapView
    
    
    init(map: MKMapView) {
        
        self.map=map
        self.activeLetterLoader = ActiveLetterLoader(map: self.map)
        self.randomLetterLoader = RandomLetterLoader(map: self.map)
        
        
    }
    
    func saveLetter(letter: LetterAnnotation){
        
        self.activeLetterLoader.saveLetter(letter: letter)
        
    }
    func areLettersStillVisible() -> Bool{
        return self.randomLetterLoader.areLettersStillVisible()
    
    }
    func placeLetters(selectedObjectId: String?){
        
        
        var oldAnnotations: [LetterAnnotation] = self.map.annotations as! [LetterAnnotation]
        let randomletters = self.randomLetterLoader.getAutoGeneratedLetters()
        let activeLetterDict = self.activeLetterLoader.getLocalLetterDict()
        
        for letterKey in activeLetterDict.keys{
            let activeLetter = activeLetterDict[letterKey]
            let localLetterCoord=activeLetter?.getCoordinate()
            let mapPointForCoord = MKMapPointForCoordinate(localLetterCoord!)
            if MKMapRectContainsPoint(self.map.visibleMapRect, mapPointForCoord){
                let letter = LetterAnnotation(active: activeLetter!)
                if letter.objectId != selectedObjectId{
                    self.map.addAnnotation(letter as MKAnnotation)
                }
                
            }
        }
        
        for letter in randomletters{
            if selectedObjectId == letter.objectId{
                
            }
            else if activeLetterDict[letter.objectId] != nil{
                
            }
            else{
                if letter.objectId != selectedObjectId{
                    self.map.addAnnotation(letter as MKAnnotation)
                }
            }
        }
        
   
        var c = 0
        for oldAnnotation in oldAnnotations{
            
            
            if (oldAnnotation.objectId == selectedObjectId)
            {
                
                oldAnnotations.remove(at: c)
                c=c-1
            }
            else if oldAnnotation is HoverAnnotation{
                oldAnnotations.remove(at: c)
                c=c-1
            }
            c=c+1
            
        }
            
        self.map.removeAnnotations(oldAnnotations)
    }
    

}
